---
import type PackageCell from "@Type/Cell";
import type PackagesRowItem from "@Interface/PackagesRowItem";

import Request from "@Library/Request";

export const { default: Icon } = await import("@Option/Icon.js");
export const { default: Parse } = await import("@Function/Parse.js");

interface Props {
	Packages: Set<PackageCell>;
}

const Dark = "&color=black&labelColor=black&logoColor=white&logoWidth=0";
const Light = "&color=white&labelColor=white&logoColor=black&logoWidth=0";

const { Packages } = Astro.props;

let Items = new Set<PackagesRowItem>();

for (const Package of Packages) {
	Items.add(await Parse(Package));
}

for (const Item of Items) {
	const Language =
		(await Request(`GET /repos/${Item.GitHub}/languages`))?.data ?? [];

	Item.Language = new Set();

	for (const Name in Language) {
		if (Object.prototype.hasOwnProperty.call(Language, Name)) {
			let [Light, Dark] = Icon[Name as keyof typeof Icon] ?? [null, null];

			Item.Language.add({
				Light,
				Dark,
				Name,
				BoC: await (
					await import("@Library/Bytes")
				).default(Language[Name]),
			});
		}
	}
}
---

{
	[...(await import("@Library/Chunks")).default(Array.from(Items), 2)].map(
		(Row) =>
			Row && (
				<tr>
					{Row.map((Package) => {
						let Span = Row.length > 1 ? 2 : 3;
						Span -= Package.Badge.size >= 1 ? 1 : 0;

						return (
							<>
								<td valign="top" colspan={Span}>
									<br />

									<a href={Package.Link} target="_blank">
										<picture>
											<source
												media="(prefers-color-scheme: dark)"
												srcset={`https://img.shields.io/github/stars/${Package.GitHub}?label=stars&logo=github${Dark}`}
											/>
											<source
												media="(prefers-color-scheme: light)"
												srcset={`https://img.shields.io/github/stars/${Package.GitHub}?label=stars&logo=github${Light}`}
											/>
											<img
												src={`https://img.shields.io/github/stars/${Package.GitHub}?label=stars&logo=github${Dark}`}
												alt="Stars"
											/>
										</picture>
									</a>

									<br />

									<a href={Package.Link} target="_blank">
										<b>{Package.Name}</b>
									</a>

									<br />

									<b
										set:html={Package.Description?.split(
											"."
										)
											?.join(".<br />")
											?.split("!")
											?.join("!<br />")
											?.split("?")
											?.join("?<br />")}
									/>

									<br />
								</td>
								{Package.Badge.size >= 1 ? (
									<td valign="top" colspan={Span}>
										<br />

										{Array.from(Package.Badge).map(
											(Badge) => (
												<>
													<a
														href={Badge.Link}
														target="_blank">
														<picture>
															<source
																media="(prefers-color-scheme: dark)"
																srcset={`${Badge.Image}${Dark}`}
															/>
															<source
																media="(prefers-color-scheme: light)"
																srcset={`${Badge.Image}${Light}`}
															/>
															<img
																src={`${Badge.Image}${Dark}`}
																alt={Badge.Alt}
																title={
																	Badge.Alt
																}
															/>
														</picture>
													</a>
													<br />
												</>
											)
										)}

										<br />
									</td>
								) : (
									""
								)}
							</>
						);
					})}
				</tr>
			)
	)
}
