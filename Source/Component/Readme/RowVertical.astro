---
import type PackageCell from "@Type/Cell";

import Request from "@Library/Request";

export const { default: Icon } = await import("@Option/Icon.js");
export const { default: Parse } = await import("@Function/Parse.js");

interface Props {
	Packages: Set<PackageCell>;
}

const Dark = "&color=black&labelColor=black&logoColor=white&logoWidth=0";
const Light = "&color=white&labelColor=white&logoColor=black&logoWidth=0";
const Items = await Parse(Astro.props.Packages);

for (const Item of Items) {
	const Language =
		(await Request(`GET /repos/${Item.GitHub}/languages`))?.data ?? [];

	Item.Language = new Set();

	for (const Name in Language) {
		if (Object.prototype.hasOwnProperty.call(Language, Name)) {
			let [Light, Dark] = Icon[Name as keyof typeof Icon] ?? [null, null];

			Item.Language.add({
				Light,
				Dark,
				Name,
				BoC: await (
					await import("@Library/Bytes")
				).default(Language[Name]),
			});
		}
	}
}

const Site = Astro.url.origin;
---

{
	[...(await import("@Library/Chunks")).default(Array.from(Items), 2)].map(
		(Row) =>
			Row && (
				<tr>
					{Row.map((Package) => {
						let Span = Row.length > 1 ? 2 : 3;
						Span -= Package.Badge.size >= 1 ? 1 : 0;

						return (
							<>
								<td valign="top" colspan={Span}>
									<br />

									<a href={Package.Link} target="_blank">
										<picture>
											<source
												media="(prefers-color-scheme: dark)"
												srcset={`https://img.shields.io/github/stars/${Package.GitHub}?label=stars&logo=github${Dark}`}
											/>
											<source
												media="(prefers-color-scheme: light)"
												srcset={`https://img.shields.io/github/stars/${Package.GitHub}?label=stars&logo=github${Light}`}
											/>
											<img
												src={`https://img.shields.io/github/stars/${Package.GitHub}?label=stars&logo=github${Dark}`}
												alt="Stars"
											/>
										</picture>
									</a>

									{Array.from(Package.Badge).map((Badge) => (
										<>
											<Fragment
												set:html={"&nbsp;&nbsp;"}
											/>

											<a
												href={Badge.Link}
												target="_blank">
												<picture>
													<source
														media="(prefers-color-scheme: dark)"
														srcset={`${Badge.Image}${Dark}`}
													/>
													<source
														media="(prefers-color-scheme: light)"
														srcset={`${Badge.Image}${Light}`}
													/>
													<img
														src={`${Badge.Image}${Dark}`}
														alt={Badge.Alt}
														title={Badge.Alt}
													/>
												</picture>
											</a>
										</>
									))}

									<br />

									<a href={Package.Link} target="_blank">
										<b>{Package.Name}</b>
									</a>

									<br />

									<b set:html={Package.Description} />

									<br />

									<Fragment set:html={`<p>`} />

									{Array.from(Package.Language ?? []).map(
										(Language, Index) =>
											Language.Light &&
											Language.Dark && (
												<>
													<picture>
														<source
															media="(prefers-color-scheme: dark)"
															srcset={
																Site +
																Language.Light
																	.src
															}
														/>
														<source
															media="(prefers-color-scheme: light)"
															srcset={
																Site +
																Language.Dark
																	.src
															}
														/>
														<img
															width="18"
															height="18"
															src={
																Site +
																Language.Light
																	.src
															}
															title={`${Language.BoC} of ${Language.Name}`}
															alt={Language.Name}
														/>
													</picture>
													<Fragment
														set:html={
															Index + 1 ==
															Package.Language
																?.size
																? ""
																: "&nbsp;&nbsp;"
														}
													/>
												</>
											)
									)}

									<Fragment set:html={`</p>`} />
								</td>
							</>
						);
					})}
				</tr>
			)
	)
}
