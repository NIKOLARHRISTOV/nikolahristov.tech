---
import Bytes from "@Library/Bytes";
import Chunks from "@Library/Chunks";
import Request from "@Library/Request";
import Icon from "@Option/Icon";

const Dark = "&color=black&logoColor=white&labelColor=black&logoWidth=15";
const Light = "&color=white&logoColor=black&labelColor=white&logoWidth=15";

const { Packages } = Astro.props;

interface Badge {
	Image: string;
	Link: string;
}

interface Language {
	Light: ImageMetadata | null;
	Dark: ImageMetadata | null;
	Name: string;
	BoC: string;
}

interface PackagesRowItem {
	Name: string;
	Link: string;
	GitHub: string;
	Description: string;
	Badge: Set<Badge>;
	Language?: Set<Language>;
}

let Items = new Set<PackagesRowItem>();

for (const Package of Packages) {
	if (Package.match(/GitHub:/)) {
		const GitHub = Package.split(":")[1];
		const Owner = GitHub.split("/")[0];
		const Repository = GitHub.split("/")[1];

		const _JSON = await Request(`GET /repos/${GitHub}`, {
			owner: Owner,
			repo: Repository,
		});

		if (_JSON?.data) {
			Items.add({
				Link: _JSON.data?.html_url ?? "",
				Name: _JSON.data?.name ?? "",
				GitHub: _JSON.data?.full_name ?? "",
				Description: _JSON.data?.description ?? "",
				Badge: new Set([
					{
						Link: `https://github.com/${Owner}/${Repository}`,
						Image: `https://img.shields.io/github/last-commit/${Owner}/${Repository}?label=Last%20Updated&logo=github`,
					},
					{
						Link: `https://github.com/${Owner}/${Repository}`,
						Image: `https://img.shields.io/github/issues/${Owner}/${Repository}?label=Issues&logo=github`,
					},
					{
						Link: `https://github.com/${Owner}/${Repository}`,
						Image: `https://img.shields.io/github/downloads/${Owner}/${Repository}/total?label=Downloads&logo=github`,
					},
				]),
			});
		}
	}

	if (Package.match(/NPM:/)) {
		const _Package = Package.split(":")[1];
		const _JSON = await (
			await fetch(`https://registry.npmjs.org/${_Package}`)
		).json();

		const GitHub = (_JSON?.homepage ?? "")
			?.replace(/(git\+)?http?s:\/\/github.com\//, "")
			?.replace("#readme", "")
			?.replace(".git", "");

		Items.add({
			Link: `https://github.com/${GitHub}`,
			Name: _JSON?.name ?? "",
			GitHub,
			Description: _JSON?.description ?? "",
			Badge: new Set([
				{
					Image: `https://img.shields.io/github/actions/workflow/status/${GitHub}/Node.yml?branch=main&label=Build&logo=node.js`,
					Link: `https://github.com/${GitHub}/actions/workflows/Node.yml`,
				},
				{
					Link: `https://npmjs.org/${_JSON.name}`,
					Image: `https://img.shields.io/npm/v/${_JSON.name}?label=Version&logo=npm`,
				},
				{
					Link: `https://npmjs.org/${_JSON.name}`,
					Image: `https://img.shields.io/librariesio/release/npm/${_JSON.name}?label=Dependencies&logo=dependabot`,
				},
				{
					Link: `https://npmjs.org/${_JSON.name}`,
					Image: `https://img.shields.io/npm/dt/${_JSON.name}?label=Downloads&logo=npm`,
				},
			]),
		});
	}

	if (Package.match(/cargo:/)) {
		const Crate = Package.split(":")[1];
		const _JSON = await (
			await fetch(`https://crates.io/api/v1/crates/${Crate}`)
		).json();

		const GitHub = (_JSON?.crate?.repository ?? "")
			?.replace(/(git\+)?http?s:\/\/github.com\//, "")
			?.replace("#readme", "")
			?.replace(".git", "");

		Items.add({
			Link: _JSON?.crate?.repository ?? "",
			Badge: new Set([
				{
					Image: `https://img.shields.io/github/actions/workflow/status/${GitHub}/rust.yml?branch=main&label=Build&logo=rust`,
					Link: `https://github.com/${GitHub}/actions/workflows/rust.yml`,
				},
				{
					Link: `https://crates.io/${_JSON?.crate?.name}`,
					Image: `https://img.shields.io/crates/v/${_JSON?.crate?.name}?label=Version&logo=rust`,
				},
				{
					Link: `https://crates.io/${_JSON?.crate?.name}`,
					Image: `https://img.shields.io/crates/d/${_JSON?.crate?.name}?label=Downloads&logo=rust`,
				},
			]),
			Description: _JSON?.crate?.description ?? "",
			GitHub,
			Name: _JSON?.crate?.name ?? "",
		});
	}
}

for (const Item of Items) {
	const Language =
		(await Request(`GET /repos/${Item.GitHub}/languages`))?.data ?? [];

	Item.Language = new Set();

	for (const Name in Language) {
		if (Object.prototype.hasOwnProperty.call(Language, Name)) {
			let [Light, Dark] = Icon[Name] ?? [null, null];

			Item.Language.add({
				Light,
				Dark,
				Name,
				BoC: await Bytes(Language[Name]),
			});
		}
	}
}

const Site = Astro.url.origin;
---

{
	[...Chunks(Array.from(Items), 2)].map((Row) => (
		<tr>
			{Row.map((Package) => {
				let Span = Row.length > 1 ? 2 : 3;
				Span -= Package.Badge.size >= 1 ? 1 : 0;

				return (
					<>
						{Package.Badge.size >= 1 ? (
							<td valign="top" colspan={Span}>
								{Array.from(Package.Badge).map((Badge) => (
									<>
										<a href={Badge.Link} target="_blank">
											<picture>
												<source
													media="(prefers-color-scheme: dark)"
													srcset={`${Badge.Image}${Dark}`}
												/>
												<source
													media="(prefers-color-scheme: light)"
													srcset={`${Badge.Image}${Light}`}
												/>
												<img
													src={`${Badge.Image}${Dark}`}
												/>
											</picture>
										</a>
										<br />
									</>
								))}
							</td>
						) : (
							""
						)}
						<td valign="top" colspan={Span}>
							<a href={Package.Link} target="_blank">
								<picture>
									<source
										media="(prefers-color-scheme: dark)"
										srcset={`https://img.shields.io/github/stars/${Package.GitHub}?label=stars&logo=github${Dark}`}
									/>
									<source
										media="(prefers-color-scheme: light)"
										srcset={`https://img.shields.io/github/stars/${Package.GitHub}?label=stars&logo=github${Light}`}
									/>
									<img
										src={`https://img.shields.io/github/stars/${Package.GitHub}?label=stars&logo=github${Dark}`}
									/>
								</picture>
							</a>
							<br />
							<a href={Package.Link} target="_blank">
								<b>{Package.Name}</b>
							</a>
							<br />
							<b
								set:html={Package.Description?.split(".")
									?.join(".<br />")
									?.split("!")
									?.join("!<br />")
									?.split("?")
									?.join("?<br />")}
							/>
							{Array.from(Package.Language ?? []).map(
								(Language, Index) =>
									Language.Light &&
									Language.Dark && (
										<>
											<picture>
												<source
													media="(prefers-color-scheme: dark)"
													srcset={
														Site +
														Language.Light.src
													}
												/>
												<source
													media="(prefers-color-scheme: light)"
													srcset={
														Site + Language.Dark.src
													}
												/>
												<img
													width="18"
													height="18"
													src={
														Site +
														Language.Light.src
													}
													title={`${Language.BoC} of ${Language.Name}`}
													alt={Language.Name}
												/>
											</picture>
											<Fragment
												set:html={
													Index + 1 ==
													Package.Language?.size
														? ""
														: "&nbsp;&nbsp;"
												}
											/>
										</>
									)
							)}
						</td>
					</>
				);
			})}
		</tr>
	))
}
