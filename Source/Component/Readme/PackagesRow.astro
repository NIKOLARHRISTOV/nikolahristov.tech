---
import Bytes from "@Library/Bytes";
import Chunks from "@Library/Chunks";
import Request from "@Library/Request";
import Icon from "@Option/Icon";

const DARK_STYLE = "&color=black&logoColor=white&labelColor=black&logoWidth=15";
const LIGHT_STYLE =
	"&color=white&logoColor=black&labelColor=white&logoWidth=15";

const { Packages } = Astro.props;

interface Badge {
	img: string;
	link: string;
}

interface Language {
	Light: ImageMetadata | null;
	Dark: ImageMetadata | null;
	Name: string;
	BoC: string;
}

interface PackagesRowItem {
	Name: string;
	Link: string;
	GitHub: string;
	Description: string;
	Badge: Set<Badge>;
	Language?: Set<Language>;
}

let Items = new Set<PackagesRowItem>();

for (const Package of Packages) {
	if (Package.match(/GitHub:/)) {
		const GitHub = Package.split(":")[1];
		const Owner = GitHub.split("/")[0];
		const Repository = GitHub.split("/")[1];

		const _JSON = await Request(`GET /repos/${GitHub}`, {
			owner: Owner,
			repo: Repository,
		});

		if (_JSON?.data) {
			Items.add({
				Link: _JSON.data?.html_url ?? "",
				Name: _JSON.data?.name ?? "",
				GitHub: _JSON.data?.full_name ?? "",
				Description: _JSON.data?.description ?? "",
				Badge: new Set([
					{
						link: `https://github.com/${Owner}/${Repository}`,
						img: `https://img.shields.io/github/last-commit/${Owner}/${Repository}?label=Last%20Updated&logo=github`,
					},
					{
						link: `https://github.com/${Owner}/${Repository}`,
						img: `https://img.shields.io/github/issues/${Owner}/${Repository}?label=Issues&logo=github`,
					},
					{
						link: `https://github.com/${Owner}/${Repository}`,
						img: `https://img.shields.io/github/downloads/${Owner}/${Repository}/total?label=Downloads&logo=github`,
					},
				]),
			});
		}
	}

	if (Package.match(/NPM:/)) {
		const _Package = Package.split(":")[1];
		const _JSON = await (
			await fetch(`https://registry.npmjs.org/${_Package}`)
		).json();

		const GitHub = (_JSON?.homepage ?? "")
			?.replace(/(git\+)?http?s:\/\/github.com\//, "")
			?.replace("#readme", "")
			?.replace(".git", "");

		Items.add({
			Link: `https://github.com/${GitHub}`,
			Name: _JSON?.name ?? "",
			GitHub,
			Description: _JSON?.description ?? "",
			Badge: new Set([
				{
					img: `https://img.shields.io/github/actions/workflow/status/${GitHub}/Node.yml?branch=main&label=Build&logo=node.js`,
					link: `https://github.com/${GitHub}/actions/workflows/Node.yml`,
				},
				{
					link: `https://npmjs.org/${_JSON.name}`,
					img: `https://img.shields.io/npm/v/${_JSON.name}?label=Version&logo=npm`,
				},
				{
					link: `https://npmjs.org/${_JSON.name}`,
					img: `https://img.shields.io/librariesio/release/npm/${_JSON.name}?label=&logo=dependabot`,
				},
				{
					link: `https://npmjs.org/${_JSON.name}`,
					img: `https://img.shields.io/npm/dt/${_JSON.name}?label=Downloads&logo=npm`,
				},
			]),
		});
	}

	if (Package.match(/cargo:/)) {
		const Crate = Package.split(":")[1];
		const _JSON = await (
			await fetch(`https://crates.io/api/v1/crates/${Crate}`)
		).json();

		const GitHub = (_JSON?.crate?.repository ?? "")
			?.replace(/(git\+)?http?s:\/\/github.com\//, "")
			?.replace("#readme", "")
			?.replace(".git", "");

		Items.add({
			Link: _JSON?.crate?.repository ?? "",
			Badge: new Set([
				{
					img: `https://img.shields.io/github/actions/workflow/status/${GitHub}/rust.yml?branch=main&label=Build&logo=rust`,
					link: `https://github.com/${GitHub}/actions/workflows/rust.yml`,
				},
				{
					link: `https://crates.io/${_JSON?.crate?.name}`,
					img: `https://img.shields.io/crates/v/${_JSON?.crate?.name}?label=Version&logo=rust`,
				},
				{
					link: `https://crates.io/${_JSON?.crate?.name}`,
					img: `https://img.shields.io/crates/d/${_JSON?.crate?.name}?label=Downloads&logo=rust`,
				},
			]),
			Description: _JSON?.crate?.description ?? "",
			GitHub,
			Name: _JSON?.crate?.name ?? "",
		});
	}
}

for (const Item of Items) {
	const Language =
		(await Request(`GET /repos/${Item.GitHub}/languages`))?.data ?? [];

	Item.Language = new Set();
	console.log(Language);

	for (const Name in Language) {
		if (Object.prototype.hasOwnProperty.call(Language, Name)) {
			let [Light, Dark] = Icon[Name] ?? [null, null];

			Item.Language.add({
				Light,
				Dark,
				Name,
				BoC: await Bytes(Language[Name]),
			});
		}
	}
}

const site = Astro.url.origin;
---

{
	[...Chunks(Array.from(Items), 2)].map((packageRow) => (
		<tr>
			{packageRow.map((_package) => {
				let colspan = packageRow.length > 1 ? 2 : 3;
				colspan -= _package.Badge.size >= 1 ? 1 : 0;

				return (
					<>
						{_package.Badge.size >= 1 ? (
							<td valign="top" colspan={colspan}>
								<center>
									{Array.from(_package.Badge).map((badge) => (
										<>
											<a
												href={badge.link}
												target="_blank">
												<picture>
													<source
														media="(prefers-color-scheme: dark)"
														srcset={`${badge.img}${DARK_STYLE}`}
													/>
													<source
														media="(prefers-color-scheme: light)"
														srcset={`${badge.img}${LIGHT_STYLE}`}
													/>
													<img
														src={`${badge.img}${DARK_STYLE}`}
													/>
												</picture>
											</a>
											<br />
										</>
									))}
								</center>
							</td>
						) : (
							""
						)}
						<td valign="top" colspan={colspan}>
							<br />
							<a href={_package.Link} target="_blank">
								<picture>
									<source
										media="(prefers-color-scheme: dark)"
										srcset={`https://img.shields.io/github/stars/${_package.GitHub}?label=stars&logo=github${DARK_STYLE}`}
									/>
									<source
										media="(prefers-color-scheme: light)"
										srcset={`https://img.shields.io/github/stars/${_package.GitHub}?label=stars&logo=github${LIGHT_STYLE}`}
									/>
									<img
										src={`https://img.shields.io/github/stars/${_package.GitHub}?label=stars&logo=github${DARK_STYLE}`}
									/>
								</picture>
							</a>
							<br />
							<a href={_package.Link} target="_blank">
								<b>{_package.Name}</b>
							</a>
							<br />
							<b
								set:html={_package.Description?.split(".")
									?.join(".<br />")
									?.split("!")
									?.join("!<br />")
									?.split("?")
									?.join("?<br />")}
							/>
							{Array.from(_package.Language ?? []).map(
								(language, index) => {
									let nbsp =
										index + 1 == _package.Language?.size
											? ""
											: "&nbsp;&nbsp;";

									return (
										language.Light &&
										language.Dark && (
											<>
												<picture>
													<source
														media="(prefers-color-scheme: dark)"
														srcset={
															site +
															language.Light.src
														}
													/>
													<source
														media="(prefers-color-scheme: light)"
														srcset={
															site +
															language.Dark.src
														}
													/>
													<img
														width="18"
														height="18"
														src={
															site +
															language.Light.src
														}
														title={`${language.BoC} of ${language.Name}`}
														alt={language.Name}
													/>
												</picture>
												<Fragment set:html={nbsp} />
											</>
										)
									);
								}
							)}
						</td>
					</>
				);
			})}
		</tr>
	))
}
