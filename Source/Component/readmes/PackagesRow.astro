---
import Bytes from "@Library/Bytes";
import Chunks from "@Library/Chunks";
import Request from "@Library/Request";
import Package from "@Option/Package";

const DARK_STYLE = "&color=black&logoColor=white&labelColor=black&logoWidth=15";
const LIGHT_STYLE =
	"&color=white&logoColor=black&labelColor=white&logoWidth=15";

const { Packages } = Astro.props;

interface Badge {
	img: string;
	link: string;
}

interface Language {
	LightIcon: ImageMetadata | null;
	DarkIcon: ImageMetadata | null;
	Name: string;
	BoC: string;
}

interface PackagesRowItem {
	Name: string;
	Link: string;
	GitHub: string;
	Description: string;
	Badges: Set<Badge>;
	Languages?: Set<Language>;
}

let Items = new Set<PackagesRowItem>();

for (const _package of Packages) {
	if (_package.match(/github:/)) {
		const GitHubOwnerRepo = _package.split(":")[1];
		const GitHubOwner = GitHubOwnerRepo.split("/")[0];
		const GitHubRepo = GitHubOwnerRepo.split("/")[1];

		const GitHubJSON = await Request(`GET /repos/${GitHubOwnerRepo}`, {
			owner: GitHubOwner,
			repo: GitHubRepo,
		});

		if (GitHubJSON?.data) {
			Items.add({
				Link: GitHubJSON.data?.html_url ?? "",
				Name: GitHubJSON.data?.name ?? "",
				GitHub: GitHubJSON.data?.full_name ?? "",
				Description: GitHubJSON.data?.description ?? "",
				Badges: new Set([
					{
						link: `https://github.com/${GitHubOwner}/${GitHubRepo}`,
						img: `https://img.shields.io/github/last-commit/${GitHubOwner}/${GitHubRepo}?label=Last%20Updated&logo=github`,
					},
					{
						link: `https://github.com/${GitHubOwner}/${GitHubRepo}`,
						img: `https://img.shields.io/github/issues/${GitHubOwner}/${GitHubRepo}?label=Issues&logo=github`,
					},
					{
						link: `https://github.com/${GitHubOwner}/${GitHubRepo}`,
						img: `https://img.shields.io/github/downloads/${GitHubOwner}/${GitHubRepo}/total?label=Downloads&logo=github`,
					},
				]),
			});
		}
	}

	if (_package.match(/npm:/)) {
		const packageScopeName = _package.split(":")[1];
		const PackageJSON = await (
			await fetch(`https://registry.npmjs.org/${packageScopeName}`)
		).json();

		const GitHubOwnerRepo = PackageJSON.homepage
			.replace(/(git\+)?http?s:\/\/github.com\//, "")
			.replace("#readme", "")
			.replace(".git", "");

		Items.add({
			Link: `https://github.com/${GitHubOwnerRepo}`,
			Name: PackageJSON?.name ?? "",
			GitHub: GitHubOwnerRepo,
			Description: PackageJSON?.description ?? "",
			Badges: new Set([
				{
					img: `https://img.shields.io/github/actions/workflow/status/${GitHubOwnerRepo}/Node.yml?branch=main&label=Build&logo=node.js`,
					link: `https://github.com/${GitHubOwnerRepo}/actions/workflows/Node.yml`,
				},
				{
					link: `https://npmjs.org/${PackageJSON.name}`,
					img: `https://img.shields.io/npm/v/${PackageJSON.name}?label=Version&logo=npm`,
				},
				{
					link: `https://npmjs.org/${PackageJSON.name}`,
					img: `https://img.shields.io/librariesio/release/npm/${PackageJSON.name}?label=Dependencies&logo=dependabot`,
				},
				{
					link: `https://npmjs.org/${PackageJSON.name}`,
					img: `https://img.shields.io/npm/dw/${PackageJSON.name}?label=Downloads&logo=npm`,
				},
			]),
		});
	}

	if (_package.match(/cargo:/)) {
		const crateScopeName = _package.split(":")[1];
		const CrateJSON = await (
			await fetch(`https://crates.io/api/v1/crates/${crateScopeName}`)
		).json();

		const GitHubOwnerRepo = (CrateJSON?.crate?.repository ?? "")
			.replace(/(git\+)?http?s:\/\/github.com\//, "")
			.replace("#readme", "")
			.replace(".git", "");

		Items.add({
			Link: CrateJSON?.crate?.repository ?? "",
			Badges: new Set([
				{
					img: `https://img.shields.io/github/actions/workflow/status/${GitHubOwnerRepo}/rust.yml?branch=main&label=Build&logo=rust`,
					link: `https://github.com/${GitHubOwnerRepo}/actions/workflows/rust.yml`,
				},
				{
					link: `https://crates.io/${CrateJSON?.crate?.name}`,
					img: `https://img.shields.io/crates/v/${CrateJSON?.crate?.name}?label=Version&logo=rust`,
				},
				{
					link: `https://crates.io/${CrateJSON?.crate?.name}`,
					img: `https://img.shields.io/crates/d/${CrateJSON?.crate?.name}?label=Downloads&logo=rust`,
				},
			]),
			Description: CrateJSON?.crate?.description ?? "",
			GitHub: GitHubOwnerRepo,
			Name: CrateJSON?.crate?.name ?? "",
		});
	}
}

for (const item of Items) {
	const languages =
		(await Request(`GET /repos/${item.GitHub}/languages`))?.data ?? [];

	item.Languages = new Set();

	for (const language in languages) {
		if (Object.prototype.hasOwnProperty.call(languages, language)) {
			let [lightIcon, darkIcon] = Package.icons[language] ?? [null, null];

			item.Languages.add({
				LightIcon: lightIcon,
				DarkIcon: darkIcon,
				Name: language,
				BoC: await Bytes(languages[language]),
			});
		}
	}
}

const site = Astro.url.origin;
---

{
	[...Chunks(Array.from(Items), 2)].map((packageRow) => (
		<tr>
			{packageRow.map((_package) => {
				let colspan = packageRow.length > 1 ? 2 : 3;
				colspan -= _package.Badges.size >= 1 ? 1 : 0;

				return (
					<>
						{_package.Badges.size >= 1 ? (
							<td valign="top" colspan={colspan}>
								<center>
									<br />
									{Array.from(_package.Languages ?? []).map(
										(language, index) => {
											let nbsp =
												index + 1 ==
												_package.Languages?.size
													? ""
													: "&nbsp;&nbsp;";

											return (
												language.LightIcon &&
												language.DarkIcon && (
													<>
														<picture>
															<source
																media="(prefers-color-scheme: dark)"
																srcset={
																	site +
																	language
																		.LightIcon
																		.src
																}
															/>
															<source
																media="(prefers-color-scheme: light)"
																srcset={
																	site +
																	language
																		.DarkIcon
																		.src
																}
															/>
															<img
																width="18"
																height="18"
																src={
																	site +
																	language
																		.LightIcon
																		.src
																}
																title={`${language.BoC} of ${language.Name}`}
																alt={
																	language.Name
																}
															/>
														</picture>
														<Fragment set:html={nbsp} />
													</>
												)
											);
										}
									)}
									<br />
									{Array.from(_package.Badges).map(
										(badge) => (
											<>
												<a
													href={badge.link}
													target="_blank">
													<picture>
														<source
															media="(prefers-color-scheme: dark)"
															srcset={`${badge.img}${DARK_STYLE}`}
														/>
														<source
															media="(prefers-color-scheme: light)"
															srcset={`${badge.img}${LIGHT_STYLE}`}
														/>
														<img
															src={`${badge.img}${DARK_STYLE}`}
														/>
													</picture>
												</a>
												<br />
											</>
										)
									)}
								</center>
							</td>
						) : (
							""
						)}
						<td valign="top" colspan={colspan}>
							<br />
							<a href={_package.Link} target="_blank">
								<picture>
									<source
										media="(prefers-color-scheme: dark)"
										srcset={`https://img.shields.io/github/stars/${_package.GitHub}?label=stars&logo=github${DARK_STYLE}`}
									/>
									<source
										media="(prefers-color-scheme: light)"
										srcset={`https://img.shields.io/github/stars/${_package.GitHub}?label=stars&logo=github${LIGHT_STYLE}`}
									/>
									<img
										src={`https://img.shields.io/github/stars/${_package.GitHub}?label=stars&logo=github${DARK_STYLE}`}
									/>
								</picture>
							</a>
							<br />
							<a href={_package.Link} target="_blank">
								<b>{_package.Name}</b>
							</a>
							<br />
							<b
								set:html={_package.Description
									?.split(".")
									?.join(".<br />")
									?.split("!")
									?.join("!<br />")
									?.split("?")
									?.join("?<br />")}
							/>
							<br />
						</td>
					</>
				);
			})}
		</tr>
	))
}
