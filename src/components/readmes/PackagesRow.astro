---
import chunks from "@lib/chunks.js";
import request from "@lib/request.js";

import css3Dark from "@assets/images/packages/css3Dark.svg";
import css3Light from "@assets/images/packages/css3Light.svg";
import gnubashDark from "@assets/images/packages/gnubashDark.svg";
import gnubashLight from "@assets/images/packages/gnubashLight.svg";
import goDark from "@assets/images/packages/goDark.svg";
import goLight from "@assets/images/packages/goLight.svg";
import javascriptDark from "@assets/images/packages/javascriptDark.svg";
import javascriptLight from "@assets/images/packages/javascriptLight.svg";
import luaDark from "@assets/images/packages/luaDark.svg";
import luaLight from "@assets/images/packages/luaLight.svg";
import mdxDark from "@assets/images/packages/mdxDark.svg";
import mdxLight from "@assets/images/packages/mdxLight.svg";
import powershellDark from "@assets/images/packages/powershellDark.svg";
import powershellLight from "@assets/images/packages/powershellLight.svg";
import pythonDark from "@assets/images/packages/pythonDark.svg";
import pythonLight from "@assets/images/packages/pythonLight.svg";
import rustDark from "@assets/images/packages/rustDark.svg";
import rustLight from "@assets/images/packages/rustLight.svg";
import typescriptDark from "@assets/images/packages/typescriptDark.svg";
import typescriptLight from "@assets/images/packages/typescriptLight.svg";
import windowsterminalDark from "@assets/images/packages/windowsterminalDark.svg";
import windowsterminalLight from "@assets/images/packages/windowsterminalLight.svg";

const DARK_STYLE = "&color=black&logoColor=white&labelColor=black&logoWidth=15";
const LIGHT_STYLE =
	"&color=white&logoColor=black&labelColor=white&logoWidth=15";

const { packages } = Astro.props;

interface Badges {
	img: string;
	link: string;
}

interface Languages {
	lightIcon: string | null;
	darkIcon: string | null;
	language: string;
	loc: string;
}

interface PackagesRowItem {
	name: string;
	link: string;
	github: string;
	description: string;
	badges: Set<Badges>;
	languages?: Set<Languages>;
}

let items = new Set<PackagesRowItem>();

for (const _package of packages) {
	if (_package.match(/github:/)) {
		const githubOwnerRepo = _package.split(":")[1];
		const githubOwner = githubOwnerRepo.split("/")[0];
		const githubRepo = githubOwnerRepo.split("/")[1];

		const githubJSON = await request(`GET /repos/${githubOwnerRepo}`, {
			owner: githubOwner,
			repo: githubRepo,
		});

		if (githubJSON?.data) {
			items.add({
				link: githubJSON.data?.html_url ?? "",
				name: githubJSON.data?.name ?? "",
				github: githubJSON.data?.full_name ?? "",
				description: githubJSON.data?.description ?? "",
				badges: new Set([
					{
						link: `https://github.com/${githubOwner}/${githubRepo}`,
						img: `https://img.shields.io/github/last-commit/${githubOwner}/${githubRepo}?label=Last%20Updated&logo=github`,
					},
					{
						link: `https://github.com/${githubOwner}/${githubRepo}`,
						img: `https://img.shields.io/github/issues/${githubOwner}/${githubRepo}?label=Issues&logo=github`,
					},
					{
						link: `https://github.com/${githubOwner}/${githubRepo}`,
						img: `https://img.shields.io/github/downloads/${githubOwner}/${githubRepo}/total?label=Downloads&logo=github`,
					},
				]),
			});
		}
	}

	if (_package.match(/npm:/)) {
		const packageScopeName = _package.split(":")[1];
		const packageJSON = await (
			await fetch(`https://registry.npmjs.org/${packageScopeName}`)
		).json();

		const githubOwnerRepo = packageJSON.homepage
			.replace(/(git\+)?http?s:\/\/github.com\//, "")
			.replace("#readme", "")
			.replace(".git", "");

		items.add({
			link: `https://github.com/${githubOwnerRepo}`,
			name: packageJSON?.name ?? "",
			github: githubOwnerRepo,
			description: packageJSON?.description ?? "",
			badges: new Set([
				{
					img: `https://img.shields.io/github/actions/workflow/status/${githubOwnerRepo}/node.yml?branch=main&label=Build&logo=node.js`,
					link: `https://github.com/${githubOwnerRepo}/actions/workflows/node.yml`,
				},
				{
					link: `https://npmjs.org/${packageJSON.name}`,
					img: `https://img.shields.io/npm/v/${packageJSON.name}?label=Version&logo=npm`,
				},
				{
					link: `https://npmjs.org/${packageJSON.name}`,
					img: `https://img.shields.io/librariesio/release/npm/${packageJSON.name}?label=Dependencies&logo=dependabot`,
				},
				{
					link: `https://npmjs.org/${packageJSON.name}`,
					img: `https://img.shields.io/npm/dw/${packageJSON.name}?label=Downloads&logo=npm`,
				},
			]),
		});
	}

	if (_package.match(/cargo:/)) {
		const crateScopeName = _package.split(":")[1];
		const crateJSON = await (
			await fetch(`https://crates.io/api/v1/crates/${crateScopeName}`)
		).json();

		const githubOwnerRepo = (crateJSON?.crate?.repository ?? "")
			.replace(/(git\+)?http?s:\/\/github.com\//, "")
			.replace("#readme", "")
			.replace(".git", "");

		items.add({
			link: crateJSON?.crate?.repository ?? "",
			badges: new Set([
				{
					img: `https://img.shields.io/github/actions/workflow/status/${githubOwnerRepo}/rust.yml?branch=main&label=Build&logo=rust`,
					link: `https://github.com/${githubOwnerRepo}/actions/workflows/rust.yml`,
				},
				{
					link: `https://crates.io/${crateJSON?.crate?.name}`,
					img: `https://img.shields.io/crates/v/${crateJSON?.crate?.name}?label=Version&logo=rust`,
				},
				{
					link: `https://crates.io/${crateJSON?.crate?.name}`,
					img: `https://img.shields.io/crates/d/${crateJSON?.crate?.name}?label=Downloads&logo=rust`,
				},
			]),
			description: crateJSON?.crate?.description ?? "",
			github: githubOwnerRepo,
			name: crateJSON?.crate?.name ?? "",
		});
	}

	items.forEach((item) =>
		request(`GET /repos/${item.github}/languages`).then((languages) => {
			item.languages = new Set();

			for (const language in languages?.data) {
				if (
					Object.prototype.hasOwnProperty.call(
						languages?.data,
						language
					)
				) {
					let [lightIcon, darkIcon] = ((language) => {
						switch (language) {
							case "Batchfile":
								return [
									windowsterminalLight.src,
									windowsterminalDark.src,
								];
							case "CSS":
								return [css3Light.src, css3Dark.src];
							case "Go":
								return [goLight.src, goDark.src];
							case "JavaScript":
								return [
									javascriptLight.src,
									javascriptDark.src,
								];
							case "Lua":
								return [luaLight.src, luaDark.src];
							case "MDX":
								return [mdxLight.src, mdxDark.src];
							case "PowerShell":
								return [
									powershellLight.src,
									powershellDark.src,
								];
							case "Python":
								return [pythonLight.src, pythonDark.src];
							case "Rust":
								return [rustLight.src, rustDark.src];
							case "Shell":
								return [gnubashLight.src, gnubashDark.src];
							case "TypeScript":
								return [
									typescriptLight.src,
									typescriptDark.src,
								];
							default:
								return [null, null];
						}
					})(language);

					item.languages.add({
						lightIcon,
						darkIcon,
						language,
						loc: languages?.data[language],
					});
				}
			}
		})
	);
}
---

{
	[...chunks(Array.from(items), 2)].map((packageRow) => (
		<tr>
			{packageRow.map((_package) => {
				let colspan = packageRow.length > 1 ? 2 : 3;
				colspan -= _package.badges.size >= 1 ? 1 : 0;

				return (
					<>
						{_package.badges.size >= 1 ? (
							<td valign="top" colspan={colspan}>
								<br />
								{Array.from(_package.badges).map((badge) => (
									<>
										<a href={badge.link} target="_blank">
											<picture>
												<source
													media="(prefers-color-scheme: dark)"
													srcset={`${badge.img}${DARK_STYLE}`}
												/>
												<source
													media="(prefers-color-scheme: light)"
													srcset={`${badge.img}${LIGHT_STYLE}`}
												/>
												<img
													src={`${badge.img}${DARK_STYLE}`}
												/>
											</picture>
										</a>
										<br />
									</>
								))}
								<br />
							</td>
						) : (
							""
						)}
						<td valign="top" colspan={colspan}>
							<br />
							<a href={_package.link} target="_blank">
								<picture>
									<source
										media="(prefers-color-scheme: dark)"
										srcset={`https://img.shields.io/github/stars/${_package.github}?label=stars&logo=github${DARK_STYLE}`}
									/>
									<source
										media="(prefers-color-scheme: light)"
										srcset={`https://img.shields.io/github/stars/${_package.github}?label=stars&logo=github${LIGHT_STYLE}`}
									/>
									<img
										src={`https://img.shields.io/github/stars/${_package.github}?label=stars&logo=github${DARK_STYLE}`}
									/>
								</picture>
							</a>
							<br />
							<a href={_package.link} target="_blank">
								<b>{_package.name}</b>
							</a>
							<br />
							<b
								set:html={_package.description
									?.split(".")
									?.join(".<br />")
									?.split("!")
									?.join("!<br />")
									?.split("?")
									?.join("?<br />")}
							/>
							<br />
							{Array.from(_package.languages ?? []).map(
								(language) =>
									language.lightIcon &&
									language.darkIcon && (
										<>
											<picture>
												<source
													media="(prefers-color-scheme: dark)"
													srcset={language.lightIcon}
												/>
												<source
													media="(prefers-color-scheme: light)"
													srcset={language.darkIcon}
												/>
												<img
													width="24"
													height="24"
													src={language.lightIcon}
													title={`Lines of code ${language.loc}`}
													alt={language.language}
												/>
											</picture>
											&nbsp;
										</>
									)
							)}
							<br />
						</td>
					</>
				);
			})}
		</tr>
	))
}
