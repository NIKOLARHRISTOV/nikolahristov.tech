{"version":3,"file":"Request_B6i04HLj.mjs","sources":["../../Source/Function/Request.ts"],"sourcesContent":["import type { OctokitResponse } from \"@octokit/types\";\n\n/**\n * @module Request\n *\n */\nexport default async (\n\tWhere: string,\n\tWith = {},\n\tType = \"octokit\",\n\t// biome-ignore lint/suspicious/noExplicitAny:\n): Promise<OctokitResponse<any, number> | any> => {\n\ttry {\n\t\tswitch (Type) {\n\t\t\tcase \"octokit\": {\n\t\t\t\treturn await new (await import(\"@octokit/core\")).Octokit({\n\t\t\t\t\tauth: (\n\t\t\t\t\t\tawait import(\"@Variable/Environment.js\")\n\t\t\t\t\t).default.parse(process.env).Token,\n\t\t\t\t}).request(\n\t\t\t\t\tWhere,\n\t\t\t\t\t(await import(\"deepmerge-ts\")).deepmerge(With, {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\"If-None-Match\": (await import(\"etag\")).default(\n\t\t\t\t\t\t\t\tWhere,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Cannot ${Where}.`);\n\t\t}\n\t} catch (_Error) {\n\t\tconsole.log(`Cannot ${Where}.`);\n\t\tconsole.log(_Error);\n\t}\n};\n"],"names":[],"mappings":"AAMA,gBAAe,OACd,KACA,EAAA,IAAA,GAAO,EAAC,EACR,OAAO,SAE0C,KAAA;AACjD,EAAI,IAAA;AACH,IAAA,QAAQ,IAAM;AAAA,MACb,KAAK,SAAW,EAAA;AACf,QAAA,OAAO,MAAM,IAAK,CAAA,MAAM,OAAO,eAAe,GAAG,OAAQ,CAAA;AAAA,UACxD,IAAA,EAAA,CACC,MAAM,OAAO,4BAA0B,GACtC,OAAQ,CAAA,KAAA,CAAM,OAAQ,CAAA,GAAG,CAAE,CAAA,KAAA;AAAA,SAC7B,CAAE,CAAA,OAAA;AAAA,UACF,KAAA;AAAA,UAAA,CACC,MAAM,OAAO,cAAc,CAAA,EAAG,UAAU,IAAM,EAAA;AAAA,YAC9C,OAAS,EAAA;AAAA,cACR,eAAkB,EAAA,CAAA,MAAM,OAAO,MAAM,CAAG,EAAA,OAAA;AAAA,gBACvC,KAAA;AAAA,eACD;AAAA,aACD;AAAA,WACA,CAAA;AAAA,SACF,CAAA;AAAA,OACD;AAAA,MAEA;AACC,QAAA,MAAM,IAAI,KAAA,CAAM,CAAU,OAAA,EAAA,KAAK,CAAG,CAAA,CAAA,CAAA,CAAA;AAAA,KACpC;AAAA,WACQ,MAAQ,EAAA;AAChB,IAAQ,OAAA,CAAA,GAAA,CAAI,CAAU,OAAA,EAAA,KAAK,CAAG,CAAA,CAAA,CAAA,CAAA;AAC9B,IAAA,OAAA,CAAQ,IAAI,MAAM,CAAA,CAAA;AAAA,GACnB;AACD,CAAA;;;;"}