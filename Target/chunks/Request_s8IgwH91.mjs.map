{"version":3,"file":"Request_s8IgwH91.mjs","sources":["../../Source/Library/Request.ts"],"sourcesContent":["import type { OctokitResponse } from \"@octokit/types\";\n\nexport default async (\n\tWhere: string,\n\t// biome-ignore lint/suspicious/noExplicitAny:\n\tWith: any = {},\n\tType = \"octokit\",\n\t// biome-ignore lint/suspicious/noExplicitAny:\n): Promise<OctokitResponse<any, number> | any> => {\n\ttry {\n\t\tconsole.log(`Successfully ${Where}`);\n\n\t\tswitch (Type) {\n\t\t\tcase \"octokit\":\n\t\t\t\treturn await new (await import(\"@octokit/core\")).Octokit({\n\t\t\t\t\tauth: (\n\t\t\t\t\t\tawait import(\"@Library/Environment.js\")\n\t\t\t\t\t).default.parse(process.env).Token,\n\t\t\t\t}).request(Where, With);\n\t\t}\n\t} catch (_Error) {\n\t\tconsole.log(`Could not ${Where}`);\n\t}\n};\n"],"names":[],"mappings":"AAEA,gBAAe,OACd,KAEA,EAAA,IAAA,GAAY,EAAC,EACb,OAAO,SAE0C,KAAA;AACjD,EAAI,IAAA;AACH,IAAQ,OAAA,CAAA,GAAA,CAAI,CAAgB,aAAA,EAAA,KAAK,CAAE,CAAA,CAAA,CAAA;AAEnC,IAAA,QAAQ,IAAM;AAAA,MACb,KAAK,SAAA;AACJ,QAAA,OAAO,MAAM,IAAK,CAAA,MAAM,OAAO,eAAe,GAAG,OAAQ,CAAA;AAAA,UACxD,IAAA,EAAA,CACC,MAAM,OAAO,4BAAyB,GACrC,OAAQ,CAAA,KAAA,CAAM,OAAQ,CAAA,GAAG,CAAE,CAAA,KAAA;AAAA,SAC7B,CAAA,CAAE,OAAQ,CAAA,KAAA,EAAO,IAAI,CAAA,CAAA;AAAA,KACxB;AAAA,WACQ,MAAQ,EAAA;AAChB,IAAQ,OAAA,CAAA,GAAA,CAAI,CAAa,UAAA,EAAA,KAAK,CAAE,CAAA,CAAA,CAAA;AAAA,GACjC;AACD,CAAA;;;;"}